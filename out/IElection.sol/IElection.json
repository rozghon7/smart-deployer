{"abi":[{"type":"function","name":"getInitData","inputs":[{"name":"_deployManager","type":"address","internalType":"address"},{"name":"_owner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"pure"},{"type":"function","name":"getLeader","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"startVoting","inputs":[{"name":"_params","type":"tuple","internalType":"struct IElection.ElectionParameters","components":[{"name":"electors","type":"uint256[]","internalType":"uint256[]"},{"name":"votingMaxVotes","type":"uint256","internalType":"uint256"},{"name":"usersMaxVotes","type":"uint256","internalType":"uint256"},{"name":"votingStartTime","type":"uint256","internalType":"uint256"},{"name":"votingEndTime","type":"uint256","internalType":"uint256"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"vote","inputs":[{"name":"_number","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"Voted","inputs":[{"name":"index","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"voter","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"VotingStarted","inputs":[],"anonymous":false},{"type":"error","name":"ElectorDoesNotExist","inputs":[{"name":"_pickedElector","type":"uint256","internalType":"uint256"},{"name":"_totalElectors","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"NotEnoughtElectors","inputs":[]},{"type":"error","name":"OwnerCanNotVote","inputs":[]},{"type":"error","name":"UserMaxVotesReached","inputs":[{"name":"_totalUserVotes","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"VotingAlreadyStarted","inputs":[]},{"type":"error","name":"VotingDoesNotStarted","inputs":[]},{"type":"error","name":"VotingEndTimeShouldBeAfterStart","inputs":[]},{"type":"error","name":"VotingMaxVotesReached","inputs":[{"name":"_totalReached","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"VotingStartTimeShouldBeInFuture","inputs":[]},{"type":"error","name":"VotingTimeIsOver","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getInitData(address,address)":"a00a45cb","getLeader()":"4c051f14","startVoting((uint256[],uint256,uint256,uint256,uint256))":"b7c29f25","vote(uint256)":"0121b93f"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pickedElector\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalElectors\",\"type\":\"uint256\"}],\"name\":\"ElectorDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughtElectors\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerCanNotVote\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalUserVotes\",\"type\":\"uint256\"}],\"name\":\"UserMaxVotesReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VotingAlreadyStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VotingDoesNotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VotingEndTimeShouldBeAfterStart\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalReached\",\"type\":\"uint256\"}],\"name\":\"VotingMaxVotesReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VotingStartTimeShouldBeInFuture\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VotingTimeIsOver\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"VotingStarted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deployManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getInitData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLeader\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"electors\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"votingMaxVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usersMaxVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingEndTime\",\"type\":\"uint256\"}],\"internalType\":\"struct IElection.ElectionParameters\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"startVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"rozghon7.\",\"errors\":{\"ElectorDoesNotExist(uint256,uint256)\":[{\"params\":{\"_pickedElector\":\"The index of the elector that was picked.\",\"_totalElectors\":\"The total number of electors.\"}}],\"UserMaxVotesReached(uint256)\":[{\"params\":{\"_totalUserVotes\":\"The total number of votes the user has cast.\"}}],\"VotingMaxVotesReached(uint256)\":[{\"params\":{\"_totalReached\":\"The total number of votes that have been reached.\"}}]},\"kind\":\"dev\",\"methods\":{\"getInitData(address,address)\":{\"params\":{\"_deployManager\":\"The address of the deploy manager.\",\"_owner\":\"The address of the owner.\"},\"returns\":{\"_0\":\"The ABI-encoded initialization data.\"}},\"getLeader()\":{\"returns\":{\"_0\":\"The index of the leading elector.\"}},\"startVoting((uint256[],uint256,uint256,uint256,uint256))\":{\"params\":{\"_params\":\"The parameters for the election.\"}},\"vote(uint256)\":{\"params\":{\"_number\":\"The index of the elector to vote for.\"}}},\"title\":\"IElection - Interface for election functionality.\",\"version\":1},\"userdoc\":{\"errors\":{\"ElectorDoesNotExist(uint256,uint256)\":[{\"notice\":\"Reverts if the elector does not exist.\"}],\"NotEnoughtElectors()\":[{\"notice\":\"Reverts if there are not enough electors.\"}],\"OwnerCanNotVote()\":[{\"notice\":\"Reverts if the owner tries to vote.\"}],\"UserMaxVotesReached(uint256)\":[{\"notice\":\"Reverts if the user has reached their maximum number of votes.\"}],\"VotingAlreadyStarted()\":[{\"notice\":\"Reverts if the voting has already started.\"}],\"VotingDoesNotStarted()\":[{\"notice\":\"Reverts if the voting has not started.\"}],\"VotingEndTimeShouldBeAfterStart()\":[{\"notice\":\"Reverts if the voting end time is before the start time.\"}],\"VotingMaxVotesReached(uint256)\":[{\"notice\":\"Reverts if the maximum number of votes has been reached.\"}],\"VotingStartTimeShouldBeInFuture()\":[{\"notice\":\"Reverts if the voting start time is in the past.\"}],\"VotingTimeIsOver()\":[{\"notice\":\"Reverts if the voting time is over.\"}]},\"events\":{\"Voted(uint256,address)\":{\"notice\":\"Emitted when a user votes.\"},\"VotingStarted()\":{\"notice\":\"Emitted when voting has started.\"}},\"kind\":\"user\",\"methods\":{\"getInitData(address,address)\":{\"notice\":\"Returns the ABI-encoded initialization data for the contract.\"},\"getLeader()\":{\"notice\":\"Returns the index of the leading elector.\"},\"startVoting((uint256[],uint256,uint256,uint256,uint256))\":{\"notice\":\"Starts the voting process with the given parameters.\"},\"vote(uint256)\":{\"notice\":\"Allows a user to vote for an elector.\"}},\"notice\":\"This interface defines the structure and functions for managing an election.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Election/IElection.sol\":\"IElection\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"],\"viaIR\":true},\"sources\":{\"src/Election/IElection.sol\":{\"keccak256\":\"0x28a556e00882a9d4bd2cfae12c203d72e62248fe24760ce2e8b16b6ec6dfc483\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2778ce585f465029873846308a08a7fc505a40be0b7d4e0dac26692bbcf6da01\",\"dweb:/ipfs/QmQAiH5zmXfjJ6EwsMFxkYu5MML3RgxVjPZrGHkmukqm6R\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.30+commit.73712a01"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"_pickedElector","type":"uint256"},{"internalType":"uint256","name":"_totalElectors","type":"uint256"}],"type":"error","name":"ElectorDoesNotExist"},{"inputs":[],"type":"error","name":"NotEnoughtElectors"},{"inputs":[],"type":"error","name":"OwnerCanNotVote"},{"inputs":[{"internalType":"uint256","name":"_totalUserVotes","type":"uint256"}],"type":"error","name":"UserMaxVotesReached"},{"inputs":[],"type":"error","name":"VotingAlreadyStarted"},{"inputs":[],"type":"error","name":"VotingDoesNotStarted"},{"inputs":[],"type":"error","name":"VotingEndTimeShouldBeAfterStart"},{"inputs":[{"internalType":"uint256","name":"_totalReached","type":"uint256"}],"type":"error","name":"VotingMaxVotesReached"},{"inputs":[],"type":"error","name":"VotingStartTimeShouldBeInFuture"},{"inputs":[],"type":"error","name":"VotingTimeIsOver"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256","indexed":true},{"internalType":"address","name":"voter","type":"address","indexed":true}],"type":"event","name":"Voted","anonymous":false},{"inputs":[],"type":"event","name":"VotingStarted","anonymous":false},{"inputs":[{"internalType":"address","name":"_deployManager","type":"address"},{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"pure","type":"function","name":"getInitData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getLeader","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"struct IElection.ElectionParameters","name":"_params","type":"tuple","components":[{"internalType":"uint256[]","name":"electors","type":"uint256[]"},{"internalType":"uint256","name":"votingMaxVotes","type":"uint256"},{"internalType":"uint256","name":"usersMaxVotes","type":"uint256"},{"internalType":"uint256","name":"votingStartTime","type":"uint256"},{"internalType":"uint256","name":"votingEndTime","type":"uint256"}]}],"stateMutability":"nonpayable","type":"function","name":"startVoting"},{"inputs":[{"internalType":"uint256","name":"_number","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"vote"}],"devdoc":{"kind":"dev","methods":{"getInitData(address,address)":{"params":{"_deployManager":"The address of the deploy manager.","_owner":"The address of the owner."},"returns":{"_0":"The ABI-encoded initialization data."}},"getLeader()":{"returns":{"_0":"The index of the leading elector."}},"startVoting((uint256[],uint256,uint256,uint256,uint256))":{"params":{"_params":"The parameters for the election."}},"vote(uint256)":{"params":{"_number":"The index of the elector to vote for."}}},"version":1},"userdoc":{"kind":"user","methods":{"getInitData(address,address)":{"notice":"Returns the ABI-encoded initialization data for the contract."},"getLeader()":{"notice":"Returns the index of the leading elector."},"startVoting((uint256[],uint256,uint256,uint256,uint256))":{"notice":"Starts the voting process with the given parameters."},"vote(uint256)":{"notice":"Allows a user to vote for an elector."}},"version":1}},"settings":{"remappings":["@openzeppelin/=node_modules/@openzeppelin/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":10},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/Election/IElection.sol":"IElection"},"evmVersion":"cancun","libraries":{},"viaIR":true},"sources":{"src/Election/IElection.sol":{"keccak256":"0x28a556e00882a9d4bd2cfae12c203d72e62248fe24760ce2e8b16b6ec6dfc483","urls":["bzz-raw://2778ce585f465029873846308a08a7fc505a40be0b7d4e0dac26692bbcf6da01","dweb:/ipfs/QmQAiH5zmXfjJ6EwsMFxkYu5MML3RgxVjPZrGHkmukqm6R"],"license":"MIT"}},"version":1},"id":75}